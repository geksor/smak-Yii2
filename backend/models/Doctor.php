<?php

namespace backend\models;

use Yii;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "doctor".
 *
 * @property int $id
 * @property string $name
 * @property string $photo
 * @property string $info
 * @property string $diplom
 * @property int $publish
 * @property int $order
 *
 * @property PositionDoctor[] $positionDoctors
 * @property Position[] $positions
 * @property Table[] $table
 */
class Doctor extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'doctor';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['photo', 'info', 'diplom', 'positionsTitle'], 'string'],
            [['publish', 'order'], 'integer'],
            [['name'], 'string', 'max' => 64],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Имя',
            'photo' => 'Фото',
            'info' => 'Информация',
            'diplom' => 'Диплом',
            'publish' => 'Публикация',
            'order' => 'Сортировка',
            'positionsTitle' => 'Должность',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPositionDoctors()
    {
        return $this->hasMany(PositionDoctor::className(), ['doctor_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPositions()
    {
        return $this->hasMany(Position::className(), ['id' => 'position_id'])->viaTable('position_doctor', ['doctor_id' => 'id']);
    }

    public function getPositionsTitle()
    {
        $positionsTitle = '';

        if ($this->positions)
        {
            $positionsCount = count($this->positions);

            foreach ($this->positions as $key => $position)
            {
                $end = $positionsCount === ++$key ? '' : ', ';
                $positionsTitle .= $position->title . $end;
            }
        }

        return $positionsTitle;
    }

    public function getPublishState()
    {
        if ($this->publish){
            return 'Опубликован';
        }
        return 'Не опубликован';
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getTable()
    {
        return $this->hasOne(Table::className(), ['doctor_id' => 'id']);
    }

    public function getSelectedPositions()
    {
        $selectPositions = $this->getPositionDoctors()->select('position_id')->asArray()->all();
        return ArrayHelper::getColumn($selectPositions, 'position_id');
    }

    public function savePositions($positions)
    {
        if (is_array($positions))
        {
            PositionDoctor::deleteAll(['doctor_id' => $this->id]);
            foreach ($positions as $position_id)
            {
                $position = Position::findOne($position_id);
                $this->link('positions', $position);
            }
        }
    }

    public function savePhoto($fileName)
    {
        $this->photo = $fileName;
        return $this->save(false);
    }

    public function getPhoto()
    {
        return ($this->photo) ? '/uploads/images/' . $this->photo : '/no_photo.png';
    }

    public function getThumbPhoto()
    {
        return ($this->photo) ? '/uploads/images/' . 'thumb_' . $this->photo : '/no_photo.png';
    }

    public function deletePhoto()
    {
        $imageUploadModel = new ImageUpload();

        $imageUploadModel->deleteCurrentImage($this->photo);
    }

    public function beforeDelete()
    {
        $this->deletePhoto();
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }
}
